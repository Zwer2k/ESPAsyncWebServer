#include "SPIFFSEditor.h"
#include <FS.h>

//File: edit.htm.gz, Size: 4151
#define edit_htm_gz_len 4169
const uint8_t edit_htm_gz[] PROGMEM = {
0x1F, 0x8B, 0x08, 0x08, 0x5A, 0x38, 0x57, 0x5E, 0x02, 0x00, 0x65, 0x64, 0x69, 0x74, 0x2E, 0x68, 
0x74, 0x6D, 0x00, 0xB5, 0x1A, 0x0B, 0x5B, 0xDB, 0x36, 0xF0, 0xAF, 0x18, 0x6F, 0x63, 0xF6, 0xE2, 
0x38, 0x0E, 0x50, 0xD6, 0x39, 0x18, 0x16, 0x1E, 0x1B, 0x5D, 0x5B, 0xA0, 0x24, 0xB4, 0xA3, 0x1D, 
0xDB, 0xA7, 0xD8, 0x4A, 0xA2, 0x62, 0x4B, 0x9E, 0x2D, 0x13, 0x68, 0x96, 0xFF, 0xBE, 0x93, 0xE4, 
0x67, 0x30, 0xDD, 0xE3, 0xDB, 0x4A, 0x21, 0x92, 0x4E, 0x77, 0xBA, 0x3B, 0xDD, 0xD3, 0xCE, 0xDE, 
0xC6, 0xF1, 0xF9, 0xD1, 0xF8, 0xFA, 0xE2, 0x44, 0x9B, 0xF3, 0x28, 0xDC, 0xDF, 0x13, 0x7F, 0xB5, 
0x10, 0xD1, 0x99, 0xA7, 0x63, 0xAA, 0xC3, 0x1C, 0xA3, 0x60, 0x7F, 0x2F, 0xC2, 0x1C, 0xC1, 0x06, 
0x1E, 0x77, 0xF1, 0xEF, 0x19, 0xB9, 0xF3, 0xF4, 0x23, 0x46, 0x39, 0xA6, 0xBC, 0xCB, 0x1F, 0x62, 
0xAC, 0x6B, 0xBE, 0x9A, 0x79, 0x3A, 0xC7, 0xF7, 0xBC, 0x27, 0x48, 0x0C, 0x34, 0x7F, 0x8E, 0x92, 
0x14, 0x73, 0x2F, 0xE3, 0xD3, 0xEE, 0x73, 0x20, 0xC4, 0x09, 0x0F, 0xF1, 0xFE, 0xC9, 0xE8, 0x42, 
0x3B, 0x09, 0x08, 0x67, 0xC9, 0x5E, 0x4F, 0xAD, 0xEC, 0xA5, 0xFC, 0x21, 0xC4, 0x9A, 0x20, 0x94, 
0xE3, 0xFB, 0x69, 0xAA, 0x6B, 0x11, 0x0E, 0x08, 0xF2, 0xF4, 0xD4, 0x4F, 0xB0, 0xE0, 0xC3, 0xF6, 
0xA3, 0xE5, 0xA7, 0x2E, 0xA1, 0x01, 0xBE, 0x77, 0xB7, 0x1D, 0x67, 0x10, 0xB3, 0x94, 0x70, 0xC2, 
0xA8, 0x8B, 0x26, 0x29, 0x0B, 0x33, 0x8E, 0x07, 0x21, 0x9E, 0x72, 0xF7, 0x59, 0x7C, 0x3F, 0x98, 
0xB0, 0x24, 0xC0, 0x89, 0xDB, 0x8F, 0xEF, 0x35, 0x00, 0x91, 0x40, 0xFB, 0x62, 0x67, 0x67, 0x67, 
0x30, 0x41, 0xFE, 0xED, 0x2C, 0x61, 0x19, 0x0D, 0xBA, 0x3E, 0x0B, 0x59, 0xE2, 0x7E, 0xF1, 0xC3, 
0x33, 0xF1, 0x33, 0x08, 0x48, 0x1A, 0x87, 0xE8, 0xC1, 0xA5, 0x8C, 0x62, 0xC0, 0xBD, 0xEF, 0xA6, 
0x73, 0x14, 0xB0, 0x85, 0xEB, 0x68, 0x8E, 0xD6, 0x77, 0x80, 0x48, 0x32, 0x9B, 0x20, 0xC3, 0xB1, 
0xC4, 0x8F, 0xBD, 0x63, 0x0E, 0xA6, 0x0C, 0xC4, 0x4E, 0xC9, 0x27, 0xEC, 0xF6, 0xB7, 0xE2, 0x7B, 
0x35, 0x9D, 0xA2, 0x88, 0x84, 0x0F, 0x6E, 0x8A, 0x68, 0xDA, 0x4D, 0x71, 0x42, 0xA6, 0x6A, 0x79, 
0x81, 0xC9, 0x6C, 0xCE, 0xDD, 0x6F, 0x1D, 0x67, 0x05, 0xFC, 0x6B, 0x59, 0xB8, 0x0C, 0x49, 0xCA, 
0xBB, 0x52, 0x60, 0x75, 0x1E, 0x67, 0xB1, 0xEB, 0x48, 0xD6, 0xE1, 0x23, 0x42, 0xC9, 0x8C, 0x50, 
0x18, 0xC4, 0x28, 0x08, 0x08, 0x9D, 0xB9, 0x0A, 0x2D, 0x24, 0xCB, 0x52, 0xDA, 0x04, 0x87, 0x88, 
0x93, 0x3B, 0x3C, 0x88, 0x08, 0xED, 0x2E, 0x48, 0xC0, 0xE7, 0xEE, 0xAE, 0x03, 0x5C, 0xF8, 0x59, 
0x92, 0x82, 0x4C, 0x31, 0x23, 0x94, 0xE3, 0x44, 0xA2, 0xA5, 0x31, 0xA2, 0x4B, 0x25, 0xAA, 0x50, 
0x40, 0x29, 0x27, 0xA1, 0x21, 0xA1, 0xB8, 0x3B, 0x09, 0x99, 0x7F, 0x5B, 0x9E, 0xB4, 0x1B, 0xDF, 
0xE7, 0x67, 0xB9, 0x73, 0x76, 0x87, 0x93, 0x65, 0xA5, 0x2E, 0x89, 0xDD, 0x00, 0x36, 0x48, 0x9F, 
0x9C, 0x9C, 0xAC, 0x6C, 0x7E, 0x97, 0x01, 0xD4, 0x92, 0x9F, 0x20, 0x65, 0x4E, 0xB5, 0x2E, 0xD2, 
0x9A, 0xE0, 0x0A, 0x85, 0xD0, 0x38, 0xE3, 0xCB, 0xC7, 0x57, 0xC9, 0x62, 0xE4, 0x13, 0xFE, 0xE0, 
0x3A, 0x72, 0xDB, 0x52, 0xE8, 0xD2, 0xDD, 0x71, 0x1C, 0x4D, 0x28, 0x5C, 0x7B, 0x8B, 0x93, 0x00, 
0x51, 0x64, 0x0D, 0x13, 0x82, 0x42, 0x6B, 0x54, 0xA9, 0xBC, 0x1B, 0xB1, 0x4F, 0xDD, 0x0C, 0xC6, 
0x30, 0x0F, 0xB1, 0xCF, 0x95, 0x86, 0xE1, 0x12, 0x26, 0xB7, 0x84, 0x3F, 0x06, 0x3C, 0x5A, 0xA8, 
0xE9, 0x4A, 0x6A, 0x68, 0xAE, 0x6E, 0xAF, 0x0F, 0xBA, 0x91, 0x7C, 0x28, 0xB1, 0x95, 0x44, 0xDD, 
0x09, 0xE3, 0x9C, 0x45, 0xD2, 0xDE, 0x4A, 0x69, 0x35, 0x69, 0x32, 0xCF, 0x1F, 0x5D, 0x47, 0xBB, 
0xEA, 0x6B, 0xE4, 0x07, 0xA0, 0x54, 0x4E, 0x7C, 0x14, 0x76, 0x51, 0x48, 0x66, 0xD4, 0x8D, 0x48, 
0x10, 0x84, 0xB8, 0x66, 0xB2, 0x6E, 0x96, 0x84, 0x46, 0x80, 0x38, 0x72, 0x49, 0x84, 0x66, 0xB8, 
0x17, 0xD3, 0x19, 0x40, 0x53, 0xBC, 0xBB, 0x63, 0x91, 0xB7, 0x87, 0xE7, 0x97, 0x0B, 0xE7, 0xE5, 
0x8F, 0x33, 0x36, 0x84, 0x7F, 0x67, 0xA3, 0xAB, 0xF9, 0xC9, 0xD5, 0x0C, 0x46, 0x87, 0x62, 0x3A, 
0x7C, 0x73, 0x34, 0x7C, 0x03, 0x1F, 0x47, 0xFD, 0xCE, 0xC7, 0xE9, 0xEF, 0x43, 0xB1, 0xFC, 0x63, 
0x70, 0x38, 0xBE, 0x3A, 0x19, 0x0E, 0x5F, 0xF6, 0x5E, 0x9C, 0x2D, 0xDE, 0xBD, 0xDC, 0x15, 0xE0, 
0xC3, 0xD0, 0xB9, 0x7C, 0x3B, 0x77, 0xAE, 0xB6, 0xBE, 0x8B, 0x82, 0xD3, 0x60, 0xEE, 0x47, 0x57, 
0xC3, 0x37, 0xEF, 0x2E, 0xEF, 0xAE, 0xA3, 0xAB, 0xD9, 0xE8, 0x5D, 0x7F, 0xFE, 0x7E, 0xEB, 0xED, 
0xE8, 0xFD, 0xBB, 0x1F, 0x6E, 0xF1, 0xCF, 0xA7, 0x3F, 0xBD, 0x1F, 0x2F, 0x00, 0xE1, 0x98, 0x8D, 
0xAE, 0x2E, 0x0F, 0xDF, 0x1E, 0xCE, 0xDE, 0x1F, 0xFA, 0x27, 0xF7, 0x93, 0xF0, 0xEC, 0xF0, 0xC7, 
0xE1, 0x64, 0xB8, 0xE5, 0x63, 0x3C, 0x1B, 0x5F, 0x1E, 0x66, 0x2F, 0x5E, 0x9E, 0xCF, 0x08, 0x99, 
0x8F, 0xDE, 0x9F, 0x8D, 0xFD, 0xA3, 0x67, 0xAF, 0xAE, 0x4E, 0x87, 0x64, 0x7E, 0xF6, 0xD3, 0xA5, 
0x73, 0xFB, 0xE3, 0xCB, 0xA3, 0x63, 0xFF, 0xFA, 0xA7, 0xEB, 0xDD, 0xE3, 0xED, 0xDE, 0xB7, 0xDF, 
0xBE, 0x0E, 0xCE, 0x09, 0x1D, 0xDF, 0x7D, 0x1A, 0xCE, 0x8E, 0x16, 0xCF, 0x1F, 0xD2, 0xF1, 0xFC, 
0xC5, 0x1D, 0xED, 0xBD, 0x65, 0x1F, 0x5F, 0x3C, 0xBC, 0x86, 0xDF, 0x8B, 0x8B, 0xCE, 0x64, 0xD4, 
0x4F, 0xAF, 0xDE, 0xBC, 0x78, 0xBB, 0x95, 0x7E, 0xF7, 0x2C, 0x3E, 0x3C, 0x3E, 0xBE, 0x8B, 0x26, 
0x17, 0xBD, 0x28, 0xB8, 0x9D, 0xF2, 0xE7, 0xDB, 0x3C, 0xBE, 0x9E, 0x65, 0xEF, 0x7F, 0x7F, 0xF6, 
0xD3, 0xBC, 0x77, 0x8E, 0xD1, 0xF5, 0xBC, 0xF3, 0xF0, 0xE9, 0xE1, 0xF9, 0x7C, 0x7C, 0x7A, 0x77, 
0x16, 0xA2, 0xFB, 0xB3, 0x33, 0xFF, 0x53, 0xD4, 0x09, 0xD1, 0x77, 0xE7, 0xE3, 0x10, 0x25, 0xFD, 
0xAB, 0x60, 0xD8, 0xEB, 0x1C, 0x6D, 0x0D, 0x77, 0x78, 0x72, 0x79, 0x44, 0x8F, 0xB7, 0x3F, 0x8E, 
0x9E, 0x1F, 0x1E, 0xF6, 0xD9, 0xE4, 0xF7, 0xAD, 0x1F, 0x6F, 0x77, 0x7F, 0xBC, 0xDA, 0x7D, 0x33, 
0x79, 0x33, 0x1C, 0xED, 0x1C, 0x5E, 0xA1, 0xEB, 0xD1, 0x9B, 0xE1, 0x74, 0x67, 0x32, 0x9F, 0xBF, 
0x7C, 0x39, 0xFE, 0x21, 0x18, 0x7E, 0x4A, 0x86, 0xE7, 0x8B, 0xE1, 0xFD, 0xC9, 0xD5, 0xF0, 0xB4, 
0xF3, 0xF2, 0xE4, 0xB5, 0xD3, 0x1F, 0x5D, 0x6F, 0xCF, 0x5E, 0xEF, 0x2E, 0x0E, 0xD3, 0x93, 0xE1, 
0x9B, 0x43, 0x67, 0xF6, 0x53, 0x27, 0x42, 0xEF, 0xD9, 0xD1, 0xF6, 0xEC, 0xC5, 0x2E, 0xB9, 0xB8, 
0x46, 0xC3, 0x17, 0x87, 0x3F, 0xA5, 0xE4, 0x32, 0x3A, 0xBD, 0x72, 0x86, 0xC3, 0x57, 0xE7, 0xF8, 
0x87, 0xA3, 0x6D, 0xF4, 0x72, 0xCB, 0x7F, 0x07, 0xFA, 0xBF, 0xFA, 0x19, 0x7F, 0xDB, 0x19, 0x2E, 
0xCE, 0x9D, 0xD0, 0xFF, 0x0E, 0x8F, 0x4F, 0xAF, 0xC7, 0xF2, 0x76, 0x4E, 0xC2, 0x1F, 0xC6, 0xB7, 
0xA3, 0xEC, 0x4D, 0x74, 0x74, 0x64, 0x6A, 0x94, 0x75, 0x13, 0x1C, 0x63, 0xC4, 0xEB, 0xB1, 0xAA, 
0x74, 0x0E, 0xB0, 0xAD, 0xCA, 0x0A, 0x73, 0x27, 0x15, 0xD1, 0xB2, 0x1B, 0x60, 0x9F, 0x25, 0x48, 
0xEE, 0x01, 0x04, 0x9C, 0x08, 0x13, 0x5B, 0x7D, 0x2F, 0xC3, 0xA7, 0xA6, 0xA2, 0xA7, 0x86, 0x68, 
0xA0, 0x19, 0x85, 0x23, 0x44, 0x84, 0x02, 0xCE, 0x1D, 0xF1, 0x71, 0x37, 0x26, 0xF7, 0x38, 0xEC, 
0x4A, 0x64, 0xD7, 0x31, 0x97, 0xD2, 0xD9, 0x8A, 0x6D, 0x88, 0x92, 0x48, 0x51, 0x2D, 0x16, 0x82, 
0x8F, 0xC8, 0x17, 0x21, 0x1F, 0x5C, 0x26, 0x82, 0xCF, 0xDC, 0x77, 0x58, 0xD2, 0x9D, 0x64, 0xB3, 
0x29, 0xB9, 0x07, 0x6F, 0x9E, 0x12, 0x4A, 0x38, 0xD6, 0xFA, 0xE9, 0xEA, 0xFB, 0x82, 0xCC, 0x2D, 
0x7E, 0x98, 0x26, 0x28, 0xC2, 0xA9, 0xF6, 0x37, 0xC9, 0x2C, 0xA7, 0x09, 0x8B, 0x96, 0x55, 0x04, 
0xE4, 0xAC, 0x36, 0x59, 0xAD, 0xBE, 0xC8, 0xE2, 0x90, 0x21, 0x10, 0xB3, 0x25, 0x6C, 0xA8, 0x60, 
0x9A, 0x08, 0xB7, 0x2A, 0x83, 0x6A, 0xE1, 0x66, 0x5B, 0xE0, 0x96, 0x0D, 0xB7, 0xDE, 0xDA, 0xA9, 
0x5C, 0xB7, 0x2B, 0xF7, 0x8A, 0x60, 0x5F, 0x57, 0x7D, 0x2D, 0x1E, 0xD4, 0x62, 0xDD, 0x17, 0x1C, 
0x54, 0xDA, 0x7E, 0xB8, 0x3A, 0x44, 0x45, 0x86, 0x8A, 0x01, 0x15, 0xA5, 0xFB, 0xBB, 0x4E, 0x2D, 
0x54, 0xC0, 0xBE, 0xD5, 0x17, 0x58, 0xA6, 0x41, 0xEB, 0x8B, 0x38, 0x81, 0xDB, 0xC0, 0x8B, 0xCF, 
0xD0, 0x2C, 0x65, 0x6A, 0xD2, 0x06, 0x9A, 0x65, 0xBA, 0x53, 0x22, 0x54, 0x39, 0x4F, 0xF2, 0x5A, 
0x92, 0x7E, 0x2C, 0x15, 0x80, 0x4B, 0x6E, 0x9E, 0x09, 0x6E, 0x3E, 0xAB, 0xD5, 0xED, 0xDD, 0xAF, 
0x72, 0x1E, 0x76, 0x9C, 0xAF, 0x56, 0xB6, 0xDA, 0x5B, 0xE6, 0xE3, 0xBE, 0x03, 0xFF, 0x8A, 0xB4, 
0xFB, 0xBC, 0x62, 0x61, 0xF2, 0x4C, 0xFC, 0x14, 0x0C, 0x02, 0x9D, 0x3A, 0x70, 0x7B, 0xE7, 0xBB, 
0xE7, 0xC1, 0xA4, 0x00, 0x2A, 0xC1, 0x9E, 0x86, 0x27, 0x28, 0x20, 0x59, 0xEA, 0x3E, 0x73, 0xBE, 
0x52, 0xFA, 0x84, 0xEB, 0x03, 0xD9, 0x8B, 0xCB, 0x55, 0x93, 0xCA, 0x62, 0xD3, 0x98, 0x50, 0x6D, 
0x2B, 0xD5, 0xC4, 0x7D, 0xA3, 0xA4, 0x34, 0xCC, 0x7A, 0xAA, 0x07, 0x17, 0xA9, 0x4C, 0x53, 0xEC, 
0x5F, 0x3A, 0x5F, 0x2D, 0x79, 0x82, 0x68, 0x3A, 0x65, 0x49, 0xE4, 0x26, 0x8C, 0x23, 0x8E, 0x0D, 
0xC7, 0x5C, 0xF5, 0x9D, 0x36, 0xC0, 0xF6, 0xAE, 0x13, 0xE0, 0x99, 0xB9, 0x5A, 0xED, 0xF5, 0x20, 
0xA9, 0xC9, 0x2A, 0xC6, 0x4F, 0x48, 0xCC, 0xF7, 0xA7, 0x19, 0xF5, 0x05, 0x0F, 0xDA, 0x0C, 0x1B, 
0xD8, 0x5C, 0x26, 0x98, 0x67, 0x09, 0xD5, 0x02, 0xE6, 0x67, 0xC2, 0xD8, 0xED, 0x19, 0xE6, 0x27, 
0xCA, 0xEE, 0x0F, 0x1F, 0x5E, 0x04, 0xB0, 0x63, 0x55, 0x22, 0xF8, 0xAD, 0x08, 0xE0, 0xC0, 0x70, 
0x5E, 0x8E, 0xD3, 0xD8, 0x0F, 0x09, 0x06, 0x88, 0xBC, 0xC4, 0x0F, 0x06, 0xB6, 0x78, 0x89, 0x88, 
0x6D, 0xB1, 0x6E, 0x14, 0xBB, 0x00, 0x46, 0xCD, 0xE5, 0x1D, 0x28, 0x01, 0x79, 0xF8, 0x03, 0xBF, 
0xB1, 0x88, 0x47, 0xE1, 0x63, 0x90, 0xEF, 0x26, 0xFB, 0xE8, 0xA0, 0xDB, 0x77, 0xD1, 0x3E, 0x39, 
0xE8, 0x83, 0x7B, 0xD5, 0xA8, 0xAB, 0x73, 0x7F, 0x20, 0x21, 0xBE, 0xCA, 0x1D, 0x4E, 0x1C, 0x23, 
0x88, 0x95, 0x5B, 0x90, 0x22, 0xBE, 0xE5, 0x38, 0x1B, 0x1E, 0x3E, 0x40, 0x21, 0x86, 0x73, 0xF5, 
0x93, 0xCB, 0xCB, 0xF3, 0xCB, 0x0F, 0x7A, 0x07, 0x77, 0xF4, 0x1B, 0x57, 0xD3, 0x3B, 0xD4, 0x74, 
0xB9, 0x9D, 0xE0, 0x69, 0x82, 0xD3, 0xF9, 0x05, 0xE2, 0x73, 0x23, 0xB0, 0xEF, 0x50, 0x98, 0xD5, 
0x05, 0x21, 0x06, 0x56, 0x2C, 0x72, 0x8F, 0xE2, 0x85, 0xF6, 0x03, 0xA8, 0xF9, 0x18, 0x71, 0x34, 
0xE0, 0x36, 0x8A, 0x63, 0x4C, 0x03, 0x43, 0x8F, 0x01, 0x51, 0xB7, 0xB0, 0x69, 0x25, 0x50, 0x7D, 
0xE2, 0x94, 0xA7, 0x36, 0x0A, 0x60, 0xF9, 0xE2, 0x6A, 0xAC, 0x5B, 0x7A, 0x4F, 0xF8, 0x91, 0x0E, 
0xBC, 0x21, 0x73, 0x25, 0xA8, 0x30, 0x0F, 0x34, 0xA9, 0x4F, 0x32, 0xCE, 0x19, 0xD5, 0xCD, 0x01, 
0xB3, 0x09, 0xA5, 0x38, 0x39, 0x1D, 0xBF, 0x7E, 0xE5, 0xE9, 0x97, 0x8A, 0x11, 0xED, 0x15, 0x49, 
0x01, 0x45, 0x5E, 0x51, 0x7E, 0xC8, 0xD1, 0x9C, 0x84, 0x81, 0xC1, 0xCC, 0x81, 0x20, 0xE1, 0x4B, 
0x12, 0xB2, 0x3A, 0x01, 0x0A, 0xBE, 0xAD, 0x6A, 0xD3, 0x29, 0x28, 0x43, 0xB7, 0x7C, 0x3B, 0xCA, 
0x42, 0x4E, 0xE2, 0x10, 0x7B, 0x1B, 0x7D, 0x98, 0x51, 0x14, 0x01, 0x4C, 0xE4, 0x66, 0x01, 0x23, 
0x81, 0xA7, 0xAB, 0x08, 0xA5, 0xE2, 0x5A, 0xEB, 0x29, 0xBE, 0x3A, 0x25, 0x68, 0x9C, 0x12, 0xD4, 
0x71, 0x95, 0xC0, 0x81, 0x5D, 0x15, 0xC5, 0x30, 0xCB, 0x8F, 0x2A, 0x60, 0x01, 0x9E, 0x22, 0xE0, 
0xE4, 0x2D, 0x68, 0x13, 0x56, 0x7B, 0x6D, 0x07, 0x05, 0xEA, 0xA0, 0xB4, 0xA9, 0x91, 0xB4, 0xAE, 
0x11, 0x75, 0xBB, 0x6D, 0xC8, 0xA9, 0x42, 0x4E, 0x9A, 0xC8, 0x49, 0x1D, 0xF9, 0x48, 0x1A, 0x49, 
0x1B, 0x72, 0xA2, 0x90, 0xC3, 0x86, 0x88, 0xA1, 0x14, 0x51, 0x85, 0xBD, 0xAE, 0xD0, 0x26, 0x08, 
0x04, 0xD8, 0x61, 0x5D, 0x4C, 0x98, 0x81, 0x97, 0xA2, 0x49, 0x88, 0x03, 0x6F, 0xC3, 0x81, 0x99, 
0xA8, 0xB4, 0xBD, 0x2D, 0xA7, 0xE5, 0x8C, 0x50, 0x9D, 0x91, 0x35, 0x19, 0xCC, 0xEA, 0x0C, 0x6A, 
0x23, 0x74, 0x87, 0xB5, 0x36, 0x06, 0x33, 0x30, 0x26, 0x9B, 0x51, 0x3F, 0x24, 0xFE, 0xAD, 0x57, 
0x79, 0x8B, 0xB9, 0x24, 0xA5, 0x85, 0x5A, 0x54, 0x06, 0xBA, 0xAB, 0x24, 0xAC, 0x96, 0x60, 0x50, 
0xE8, 0x7B, 0x65, 0x65, 0xAD, 0x04, 0xA8, 0x8D, 0xEF, 0xB1, 0x7F, 0xC4, 0xA2, 0x08, 0x09, 0xDB, 
0x4D, 0x81, 0x83, 0x7C, 0xA2, 0x9B, 0x2B, 0x8B, 0xB5, 0xE2, 0x3C, 0xE1, 0x22, 0x56, 0xDA, 0xCE, 
0xE2, 0xD4, 0x00, 0x97, 0xF3, 0x7C, 0x5B, 0xE8, 0x30, 0xB5, 0x41, 0x8F, 0x33, 0x3E, 0xFF, 0xBC, 
0x0B, 0x15, 0x06, 0xAA, 0x50, 0x3E, 0x38, 0x37, 0xB9, 0x24, 0x8F, 0x7D, 0xEA, 0x7C, 0xD4, 0x74, 
0x2A, 0xA5, 0x64, 0xEA, 0x81, 0x0A, 0x1B, 0xD6, 0x69, 0x0E, 0x68, 0xA5, 0x0B, 0xB9, 0x87, 0x88, 
0x3D, 0x4D, 0xEB, 0x87, 0x5D, 0xA4, 0xD8, 0xA5, 0xAF, 0x56, 0x96, 0x2F, 0xE4, 0x99, 0x23, 0x3A, 
0xC3, 0x7F, 0x5F, 0xA0, 0x8A, 0x67, 0xE9, 0x00, 0x16, 0xF5, 0x7A, 0xC6, 0x81, 0xFB, 0x8B, 0x6D, 
0x7C, 0xF8, 0xD5, 0xBE, 0xE9, 0x98, 0xE6, 0xC1, 0x97, 0x3D, 0xA9, 0x71, 0x83, 0x9B, 0x1F, 0xFA, 
0x37, 0x16, 0x02, 0xB0, 0xFD, 0x8D, 0xF9, 0x8B, 0x2D, 0xC1, 0x0D, 0xD8, 0xE0, 0x8E, 0x41, 0x66, 
0x11, 0x27, 0x09, 0x83, 0x63, 0x53, 0x0D, 0x6D, 0x6E, 0x1A, 0xDC, 0x43, 0x8D, 0x6B, 0xED, 0xF0, 
0x8E, 0x6E, 0x43, 0xDC, 0x5A, 0xAD, 0xD6, 0x83, 0xE1, 0x38, 0xC1, 0x58, 0xC5, 0xDA, 0x12, 0x20, 
0xB9, 0x17, 0x52, 0x43, 0xC3, 0x48, 0xA5, 0xDC, 0x32, 0xA3, 0xE8, 0xA6, 0x9D, 0x26, 0xBE, 0xA7, 
0xB4, 0x78, 0x50, 0xC0, 0x3C, 0x88, 0x8A, 0x15, 0x4D, 0x54, 0x45, 0x3D, 0x20, 0xF0, 0xC8, 0x2B, 
0xCC, 0x01, 0xCF, 0x79, 0xC2, 0x56, 0x05, 0x07, 0xC2, 0x32, 0xDD, 0xD8, 0x79, 0x26, 0xF3, 0x74, 
0x91, 0xCA, 0x74, 0x6B, 0xBE, 0xBE, 0x2C, 0x5B, 0x0C, 0x58, 0xAF, 0x39, 0xC3, 0xD7, 0x7B, 0x24, 
0x9A, 0x69, 0x35, 0xBE, 0xC4, 0x1F, 0xEF, 0x6B, 0x11, 0xA9, 0x37, 0x7F, 0xF3, 0x27, 0xC0, 0x1D, 
0x98, 0x0C, 0xB6, 0x29, 0x5B, 0x18, 0x66, 0xE7, 0x6B, 0x5D, 0x93, 0x14, 0x3D, 0x3D, 0x42, 0xF7, 
0x79, 0xA3, 0x29, 0x32, 0xE1, 0x40, 0x13, 0x73, 0x95, 0x76, 0x8B, 0x05, 0xD5, 0xE2, 0xA1, 0x8C, 
0xB3, 0x81, 0x56, 0x64, 0x58, 0xD5, 0xE2, 0xE8, 0x5A, 0x6F, 0xFF, 0xEB, 0x46, 0xA0, 0xB7, 0x88, 
0xB9, 0xAC, 0x82, 0x74, 0x16, 0x82, 0x9C, 0xF8, 0xE9, 0x08, 0x1C, 0x12, 0x80, 0xB3, 0xB5, 0xD8, 
0x69, 0x25, 0x06, 0x31, 0x0F, 0x0C, 0xBF, 0xEE, 0xE7, 0x7B, 0xA2, 0x28, 0xDE, 0xBF, 0x50, 0xD5, 
0xCE, 0x5E, 0x4F, 0xCE, 0xC0, 0xDA, 0x1F, 0x7B, 0x0F, 0x5C, 0x1E, 0x02, 0x74, 0xAB, 0xCC, 0xAF, 
0x13, 0x16, 0x3C, 0xD4, 0xB2, 0x72, 0x7A, 0xF8, 0x70, 0x14, 0xA2, 0x34, 0x3D, 0x43, 0x11, 0x9C, 
0xEF, 0x47, 0xBA, 0x99, 0x5B, 0xE3, 0xBE, 0xB3, 0xB9, 0xD9, 0x44, 0x4A, 0x70, 0x04, 0x45, 0xB8, 
0xE2, 0x0A, 0x7C, 0xD5, 0x74, 0x53, 0x20, 0xBC, 0xB9, 0xD9, 0xC6, 0x98, 0x78, 0xE0, 0xF1, 0x39, 
0xAE, 0x28, 0x44, 0x80, 0x22, 0xD6, 0xFC, 0x4F, 0xDC, 0xA9, 0x8C, 0xF3, 0x94, 0x56, 0x03, 0x38, 
0xF3, 0x31, 0xDB, 0xC7, 0xB9, 0xE1, 0x96, 0xAC, 0x07, 0xAD, 0x0A, 0xA5, 0xFF, 0x0F, 0xCB, 0x2A, 
0x81, 0x3C, 0xC5, 0x71, 0x68, 0x5A, 0x61, 0x0B, 0xC7, 0x38, 0xC4, 0x1C, 0x97, 0xFC, 0x86, 0xAD, 
0xFC, 0x66, 0xFF, 0x0F, 0xBF, 0x95, 0x9D, 0x33, 0x11, 0x25, 0xCA, 0xBA, 0x4B, 0x4A, 0x10, 0x90, 
0x3B, 0xDD, 0xB4, 0x98, 0xD7, 0xA4, 0x00, 0x35, 0x23, 0x0B, 0xC3, 0x31, 0x8B, 0x0F, 0x9E, 0x58, 
0x77, 0xCB, 0xF5, 0x7C, 0x50, 0xB0, 0x59, 0x6D, 0xB1, 0xFC, 0x56, 0xA2, 0xAF, 0xF0, 0x94, 0x1F, 
0x3C, 0x05, 0x78, 0x9A, 0x6C, 0xB5, 0xC7, 0x0A, 0x3C, 0x6C, 0x83, 0xF2, 0x60, 0xF5, 0xE7, 0x8E, 
0x6F, 0xA5, 0xE5, 0xEC, 0xBA, 0xC3, 0x06, 0x08, 0xC6, 0xB9, 0x92, 0x3C, 0xA1, 0x24, 0x0B, 0xB5, 
0x06, 0xA0, 0x6A, 0x5D, 0x74, 0x27, 0x5E, 0xD0, 0xD1, 0xE3, 0xFB, 0x6A, 0x8D, 0xB3, 0xD8, 0x4B, 
0xD5, 0x12, 0x31, 0x90, 0xC5, 0xD7, 0x2E, 0xA5, 0x71, 0xDD, 0xA8, 0x28, 0x46, 0x90, 0xCD, 0xA6, 
0xD3, 0x14, 0xF3, 0x77, 0x22, 0x24, 0x59, 0x61, 0x39, 0x3F, 0x95, 0x21, 0x69, 0x00, 0x53, 0x1A, 
0xB1, 0x2C, 0xC5, 0x2C, 0xE3, 0x8D, 0x14, 0x63, 0x94, 0xC2, 0xEC, 0x05, 0x7F, 0xFC, 0x51, 0x4E, 
0xF6, 0x83, 0x4E, 0x52, 0x4D, 0xAF, 0xF7, 0xD2, 0xDA, 0x64, 0x3F, 0xED, 0x84, 0xE0, 0xD0, 0xFF, 
0xB1, 0xA5, 0xA0, 0xBA, 0xA5, 0xF8, 0xA2, 0x84, 0x96, 0x31, 0xB1, 0x19, 0xF3, 0x64, 0x21, 0x49, 
0x6B, 0x3E, 0x2B, 0x0C, 0x5A, 0x37, 0x8B, 0xB2, 0xBD, 0xEE, 0xAB, 0xD4, 0xF2, 0xD7, 0x5D, 0xD9, 
0x6F, 0xAD, 0x1A, 0x52, 0x43, 0x50, 0x05, 0xAD, 0xBF, 0x62, 0x0B, 0x9C, 0x1C, 0xA1, 0x14, 0x1B, 
0x90, 0x3C, 0xCB, 0xB8, 0x23, 0xA1, 0xA6, 0x9B, 0xB4, 0xEC, 0x02, 0x25, 0x20, 0x05, 0xCE, 0x33, 
0x38, 0xA3, 0xA2, 0x56, 0x03, 0xF9, 0xB2, 0xC6, 0x09, 0xD8, 0x16, 0xFD, 0x26, 0x48, 0x7D, 0xAC, 
0x4A, 0x53, 0xC3, 0xB4, 0x30, 0xDC, 0x35, 0x8B, 0x2F, 0x12, 0x16, 0xA3, 0x99, 0xEC, 0xCD, 0x60, 
0x4D, 0xB8, 0x87, 0xA0, 0x66, 0x6D, 0x38, 0x82, 0x60, 0xA5, 0x8D, 0xA0, 0xF0, 0x9B, 0xAA, 0xB5, 
0xA1, 0x96, 0x9E, 0xA7, 0x43, 0xE9, 0x4B, 0x4F, 0x65, 0x0D, 0x24, 0x1E, 0xCB, 0x26, 0x86, 0xAA, 
0x42, 0x68, 0x7E, 0x0F, 0xE0, 0x6E, 0xCE, 0x80, 0xEC, 0xB3, 0x01, 0xEB, 0x74, 0x4C, 0x55, 0xBD, 
0x7B, 0x1E, 0xB4, 0x3F, 0xEC, 0x46, 0x16, 0x9C, 0x20, 0x54, 0x33, 0xB3, 0x18, 0xDC, 0x92, 0x40, 
0x71, 0xA0, 0x1C, 0xC9, 0xDA, 0xD3, 0xAC, 0xB7, 0x5C, 0x65, 0xCE, 0x7E, 0xAA, 0x06, 0xC1, 0xB2, 
0xCE, 0x80, 0x7A, 0x66, 0xBD, 0xD4, 0xE0, 0x66, 0xBA, 0x20, 0xDC, 0x9F, 0x8B, 0x00, 0xE4, 0x83, 
0x56, 0x75, 0x0E, 0xC5, 0xAE, 0x2B, 0x47, 0x73, 0x1E, 0x55, 0xA3, 0x30, 0x1F, 0x7E, 0x4C, 0xF3, 
0x81, 0x9F, 0x16, 0xA3, 0xFB, 0x1A, 0x90, 0xD1, 0x02, 0xCC, 0xE8, 0x34, 0x1F, 0x12, 0x4A, 0x0A, 
0x3A, 0x05, 0xB0, 0xF8, 0x8C, 0xE3, 0x7C, 0x14, 0xCF, 0x8B, 0xD1, 0x1C, 0xDF, 0x97, 0x78, 0xAC, 
0x80, 0x06, 0x58, 0x77, 0x95, 0x8D, 0x6D, 0x38, 0xAB, 0x7C, 0xD0, 0xAF, 0xE4, 0x4F, 0xFE, 0x43, 
0xF9, 0x63, 0x3A, 0x2B, 0xA4, 0x89, 0x8B, 0xD1, 0x8C, 0x14, 0xB2, 0x4C, 0xA2, 0xF8, 0xB3, 0x9C, 
0x84, 0xB5, 0x5E, 0xB9, 0xD6, 0xEB, 0xF2, 0xBF, 0x6A, 0x47, 0xB9, 0xE9, 0x1A, 0xD3, 0xBA, 0x3F, 
0xC2, 0xCC, 0x17, 0x9F, 0x67, 0x2C, 0x90, 0x35, 0xA6, 0x69, 0x45, 0xC6, 0xD4, 0x82, 0x3A, 0xD0, 
0xAC, 0xFB, 0x69, 0xF6, 0x6F, 0x5B, 0xD4, 0xE3, 0x93, 0x57, 0x27, 0xE3, 0x93, 0x7A, 0x41, 0x1D, 
0x1A, 0x0D, 0x93, 0x8A, 0x15, 0xD7, 0xEB, 0xA2, 0x50, 0x0B, 0x49, 0x51, 0xC0, 0x5E, 0x37, 0x37, 
0x95, 0x5F, 0xFC, 0x34, 0x3A, 0x3F, 0xB3, 0x63, 0x94, 0x80, 0x47, 0xA2, 0x06, 0x73, 0x91, 0x22, 
0xD1, 0x3C, 0xF8, 0xC7, 0x93, 0x5A, 0x19, 0x2F, 0x5F, 0x3B, 0xB8, 0x7C, 0x65, 0xA9, 0xD3, 0x54, 
0x9F, 0x3C, 0x97, 0x75, 0x67, 0xFE, 0x84, 0x08, 0x92, 0xD3, 0xB4, 0x4A, 0x54, 0x83, 0x82, 0x9D, 
0x7A, 0x98, 0xE7, 0x77, 0x59, 0x5B, 0x23, 0x35, 0x35, 0x2D, 0x3E, 0x27, 0x69, 0xBD, 0x81, 0x69, 
0x04, 0x85, 0xBF, 0xA9, 0xED, 0x55, 0x31, 0x52, 0xE4, 0xD6, 0x6B, 0x6F, 0xF5, 0xCA, 0x48, 0xC5, 
0x07, 0x0B, 0x89, 0x88, 0x59, 0x65, 0xDB, 0xEA, 0x6E, 0x74, 0xC8, 0x3D, 0x84, 0xEA, 0x16, 0xFD, 
0xC7, 0xE6, 0x49, 0x0B, 0xF3, 0xA4, 0x75, 0xF7, 0x2C, 0x29, 0x0E, 0x26, 0xC0, 0xC5, 0xED, 0xA0, 
0x74, 0x9C, 0x76, 0x88, 0xF2, 0xC5, 0x76, 0x24, 0x1E, 0x09, 0x88, 0xF4, 0xF0, 0x06, 0xE0, 0x63, 
0x2A, 0xD7, 0x3F, 0xA2, 0x3B, 0xA4, 0x9E, 0x20, 0x35, 0xD1, 0x24, 0xD0, 0xFF, 0x0D, 0x1C, 0xB8, 
0x79, 0xD2, 0x53, 0xEB, 0x30, 0x6F, 0x87, 0x54, 0x61, 0x24, 0x85, 0xE1, 0xE3, 0x68, 0xC0, 0x1B, 
0xC1, 0xA5, 0x8A, 0x38, 0xF5, 0xD8, 0x02, 0xC6, 0x9F, 0xBB, 0xA2, 0xC6, 0x6B, 0x17, 0x54, 0xF7, 
0xBB, 0xCD, 0xCD, 0x27, 0x1D, 0xAF, 0x19, 0xE7, 0xAB, 0xFA, 0xA8, 0xE9, 0x51, 0x68, 0xAD, 0x63, 
0x15, 0xC0, 0xC3, 0x90, 0x4D, 0x0C, 0xF1, 0xF0, 0x6A, 0x29, 0x6E, 0xCB, 0xA5, 0x2B, 0xD3, 0xFA, 
0x8B, 0xBE, 0x15, 0x59, 0x7E, 0x3D, 0x6C, 0x2B, 0x0E, 0xEB, 0xE6, 0xDE, 0xDE, 0x47, 0x35, 0x3B, 
0xAD, 0xF6, 0x8A, 0x46, 0x3A, 0x25, 0x3E, 0x08, 0xED, 0x14, 0xAB, 0x67, 0x2F, 0x06, 0xC4, 0x94, 
0xDA, 0x4C, 0xD7, 0x45, 0x65, 0xEA, 0x87, 0x18, 0x25, 0x23, 0xD1, 0x03, 0xAB, 0xA4, 0xD7, 0x88, 
0xA1, 0x9F, 0xF7, 0x55, 0xF1, 0xE1, 0x62, 0xE8, 0xFD, 0xCD, 0x95, 0x2E, 0x1E, 0xE8, 0x4F, 0x09, 
0xC5, 0x81, 0x5E, 0x05, 0x52, 0xD9, 0xB3, 0xEA, 0x3D, 0xF9, 0xE8, 0xD5, 0x96, 0xF7, 0x66, 0x5A, 
0x6D, 0x1B, 0x29, 0x6C, 0xA4, 0x1E, 0x03, 0xF6, 0xDA, 0xE1, 0x08, 0xE0, 0x08, 0xFA, 0x3B, 0x46, 
0xD9, 0x2D, 0x22, 0x4F, 0x10, 0x21, 0xB0, 0x89, 0xE4, 0xAF, 0x65, 0xA1, 0x29, 0xB6, 0x94, 0x65, 
0xC9, 0x3C, 0x5A, 0x83, 0x28, 0x7B, 0x37, 0x8B, 0x67, 0x3E, 0xC8, 0xC7, 0xB6, 0x90, 0xC2, 0xC0, 
0x45, 0x24, 0xC9, 0x3D, 0x62, 0x43, 0xA2, 0x85, 0xA2, 0x88, 0x1A, 0xE1, 0x34, 0x95, 0x9A, 0x11, 
0x9A, 0x7B, 0xCD, 0x02, 0x50, 0x1C, 0xA0, 0xF5, 0x22, 0x18, 0x89, 0x83, 0x40, 0x87, 0x02, 0x30, 
0x9E, 0xE3, 0x28, 0x87, 0x70, 0x18, 0x0A, 0x10, 0x12, 0xA0, 0x2F, 0xE5, 0x65, 0x8C, 0x64, 0xB1, 
0x4A, 0xE8, 0xCC, 0xEB, 0xF7, 0x1C, 0xEB, 0x31, 0xD9, 0xAB, 0x14, 0x8F, 0xD8, 0x94, 0x8F, 0xD1, 
0x24, 0x35, 0xA0, 0xD6, 0x68, 0xD9, 0x01, 0xA0, 0x11, 0xE4, 0x78, 0x63, 0xCB, 0x6C, 0x47, 0x7F, 
0xC7, 0x92, 0x5B, 0x9C, 0x18, 0x1B, 0xFD, 0x9C, 0x9F, 0x53, 0x28, 0x32, 0x43, 0xF8, 0xE5, 0x43, 
0x5F, 0xBC, 0x85, 0x7D, 0x05, 0xCA, 0xCA, 0x29, 0xA7, 0x80, 0x3C, 0x67, 0x8B, 0x8B, 0x84, 0x50, 
0xFE, 0x5A, 0x76, 0xC4, 0x39, 0x96, 0xAF, 0x9E, 0xFD, 0xC8, 0xAB, 0x2E, 0x1E, 0x0A, 0x2D, 0x45, 
0x89, 0xE1, 0x36, 0x1E, 0x0D, 0x59, 0x13, 0xB8, 0x50, 0xA8, 0x78, 0xDC, 0xE5, 0x82, 0x50, 0x57, 
0x3F, 0xE2, 0x49, 0xD8, 0x1D, 0xE9, 0x56, 0x84, 0x7C, 0x98, 0xA8, 0x3D, 0x30, 0x5F, 0x59, 0x22, 
0x8C, 0xB9, 0xF5, 0xF8, 0x1A, 0x18, 0xDC, 0xC2, 0xF6, 0xAC, 0x30, 0x3F, 0xB3, 0xA3, 0xEB, 0x16, 
0x81, 0x70, 0x0A, 0xAE, 0x1F, 0x9C, 0xD3, 0xF0, 0xC1, 0x85, 0xB4, 0xF9, 0x79, 0x3E, 0xC4, 0xBD, 
0xB3, 0xCF, 0xF1, 0xF1, 0x7E, 0x8D, 0x8F, 0xF7, 0x6D, 0x7C, 0xE0, 0xA6, 0xFE, 0x60, 0x72, 0x05, 
0x64, 0x5F, 0x23, 0x8A, 0x66, 0x38, 0x81, 0x05, 0x71, 0x08, 0xA8, 0xE4, 0x9F, 0x71, 0x96, 0xE0, 
0xCF, 0x73, 0x36, 0x9A, 0x93, 0x29, 0x5F, 0xE7, 0x4F, 0xAD, 0xFE, 0x3B, 0x2E, 0x13, 0xFC, 0x04, 
0x97, 0x45, 0x99, 0xDC, 0xC8, 0x6D, 0x2A, 0x7E, 0xB5, 0x3F, 0xBE, 0x41, 0xE5, 0xE3, 0x1B, 0x0E, 
0xBF, 0xCA, 0x11, 0xAD, 0xBA, 0x2B, 0xFD, 0x0B, 0x9F, 0x48, 0x0C, 0x0E, 0x9C, 0x85, 0xB5, 0x4E, 
0x93, 0x1E, 0x42, 0x7F, 0xF1, 0x0A, 0x58, 0x33, 0x14, 0x37, 0xD8, 0x5B, 0xAE, 0xE0, 0x40, 0x63, 
0x41, 0x40, 0xAC, 0x05, 0x30, 0xED, 0xCB, 0xAA, 0xDB, 0x9E, 0x27, 0x58, 0x24, 0x62, 0x38, 0x12, 
0x92, 0x7C, 0xEF, 0xC3, 0xC1, 0xE6, 0x4D, 0x07, 0x92, 0xA3, 0x07, 0x1F, 0xA6, 0x07, 0x83, 0xCD, 
0x9B, 0x6F, 0xCC, 0xDE, 0x8C, 0x58, 0xA5, 0x70, 0x32, 0xCD, 0x82, 0xBA, 0x3E, 0xD0, 0x1B, 0x0F, 
0x81, 0xFC, 0xF5, 0x2C, 0x5C, 0x86, 0x48, 0xB0, 0x3B, 0x21, 0x30, 0x7C, 0x84, 0x88, 0xCE, 0xE0, 
0x43, 0xFA, 0xA8, 0x69, 0x82, 0xB4, 0xB5, 0x27, 0x66, 0x3A, 0x87, 0xBF, 0x3A, 0x04, 0xE0, 0x41, 
0xCB, 0x3B, 0x05, 0x3D, 0xCB, 0x47, 0x3A, 0x1C, 0xC8, 0xDB, 0x63, 0x90, 0x3A, 0x05, 0xC2, 0x8D, 
0x1A, 0xD4, 0x63, 0x1F, 0x44, 0xAD, 0xAA, 0x81, 0x51, 0xE0, 0xF6, 0xA8, 0xF9, 0xF3, 0xEB, 0x57, 
0xA7, 0x9C, 0xC7, 0x97, 0x2A, 0xEE, 0x02, 0xAD, 0xE6, 0x42, 0x75, 0xAB, 0xE6, 0x92, 0x27, 0x0F, 
0x45, 0x39, 0x26, 0x92, 0x8F, 0xF2, 0xF4, 0x9F, 0xCF, 0x27, 0x1F, 0xB1, 0x0F, 0x79, 0xED, 0x75, 
0x0A, 0x49, 0x71, 0xCB, 0x16, 0xE8, 0xE3, 0xF1, 0x85, 0xBD, 0x6B, 0x3B, 0x50, 0xBB, 0x80, 0x92, 
0xFD, 0xB9, 0x30, 0x88, 0xD5, 0x3F, 0x42, 0xDE, 0xFE, 0x67, 0xC8, 0x04, 0xC2, 0x5D, 0x0A, 0xF1, 
0xAC, 0xC0, 0x6F, 0xE2, 0xCE, 0x13, 0xB6, 0x90, 0x68, 0x27, 0x49, 0x22, 0xEE, 0x68, 0x0C, 0x55, 
0x94, 0x36, 0x81, 0xC5, 0x14, 0x43, 0x13, 0xC9, 0x70, 0xAA, 0x51, 0xC6, 0xB5, 0x34, 0x8B, 0x63, 
0x96, 0xF0, 0x35, 0x7D, 0xD8, 0x7A, 0xF1, 0x84, 0xE8, 0x4D, 0x86, 0x33, 0x1C, 0xE4, 0xCB, 0x38, 
0xA9, 0xEB, 0x45, 0x56, 0x79, 0xB0, 0x0E, 0x36, 0xFD, 0xE1, 0x26, 0xAF, 0xF9, 0x32, 0x4A, 0x45, 
0xF8, 0xDD, 0xE8, 0xAB, 0x39, 0x48, 0x37, 0x07, 0xAA, 0x1E, 0xCD, 0xC2, 0x70, 0x35, 0x58, 0xA3, 
0x05, 0xCD, 0x21, 0xE3, 0x4C, 0x3E, 0xEA, 0x5F, 0xFE, 0x96, 0x27, 0xC0, 0x86, 0x6F, 0x96, 0x56, 
0xCD, 0xDB, 0x6B, 0x62, 0x73, 0xB9, 0x03, 0x99, 0xD7, 0x16, 0x8E, 0xF9, 0x30, 0xE2, 0x88, 0x0B, 
0x93, 0x10, 0xBE, 0xA7, 0x0C, 0xE8, 0xA9, 0x94, 0xCE, 0x6D, 0x1F, 0x85, 0xA1, 0x78, 0x01, 0x0A, 
0x06, 0x92, 0x02, 0x5A, 0x96, 0x5A, 0x82, 0x48, 0x1A, 0x33, 0x9A, 0xE2, 0x31, 0x78, 0xA3, 0x69, 
0x39, 0x22, 0x9F, 0x29, 0xD9, 0xF2, 0xDE, 0x51, 0xE4, 0xCE, 0x9A, 0x78, 0xA6, 0x55, 0xCE, 0x36, 
0x37, 0xA9, 0x5D, 0xB0, 0x6F, 0x14, 0x48, 0xA9, 0x88, 0x38, 0x86, 0x29, 0xCA, 0x72, 0x28, 0x2E, 
0x9B, 0xBA, 0x71, 0xAC, 0x0D, 0x63, 0x03, 0x6B, 0x84, 0xC2, 0xE1, 0xD4, 0x17, 0xC6, 0xA8, 0x6E, 
0xD4, 0x54, 0x1E, 0x4B, 0x3D, 0xB1, 0x7D, 0x50, 0x0A, 0xF2, 0x64, 0xE5, 0x91, 0x77, 0xC0, 0xBA, 
0x2E, 0xEA, 0x57, 0x2C, 0x3A, 0x01, 0x14, 0xA5, 0x35, 0xB2, 0x65, 0x0D, 0x65, 0x22, 0xAF, 0x00, 
0x0F, 0x70, 0x98, 0x62, 0xAD, 0xB9, 0x7F, 0x9D, 0x8D, 0xB2, 0x71, 0x06, 0x98, 0x56, 0xEC, 0x33, 
0x51, 0x07, 0x4E, 0x02, 0xB5, 0xA0, 0x03, 0x59, 0x9E, 0x78, 0x42, 0xF3, 0x11, 0xE6, 0x73, 0x16, 
0x1C, 0xE8, 0x07, 0xBA, 0xAB, 0xC3, 0xFF, 0x4D, 0xDD, 0x82, 0x5D, 0x98, 0xFA, 0x2C, 0xC0, 0x57, 
0x97, 0x2F, 0x20, 0xFA, 0x82, 0x4A, 0x31, 0xE5, 0x06, 0x81, 0x24, 0xE4, 0xE9, 0x9D, 0x16, 0x48, 
0x41, 0xFE, 0x03, 0xB9, 0x31, 0x07, 0x4D, 0x93, 0xC1, 0x8B, 0x35, 0xA3, 0x6C, 0x98, 0x94, 0xCD, 
0xA8, 0xBC, 0x77, 0x71, 0x81, 0x38, 0x7F, 0x83, 0xC0, 0x8D, 0xFA, 0x0E, 0x51, 0x12, 0x3E, 0x62, 
0xD5, 0x68, 0xD2, 0x88, 0x31, 0x35, 0x0A, 0x18, 0x18, 0x41, 0x96, 0x84, 0x1D, 0x24, 0x9E, 0x42, 
0x34, 0x8F, 0x4A, 0x45, 0xF9, 0x69, 0x9A, 0xEE, 0x5F, 0x22, 0x4B, 0x54, 0x54, 0x57, 0xE9, 0x88, 
0x27, 0xD2, 0x44, 0xD6, 0xE8, 0xF1, 0x5C, 0xA4, 0x53, 0x2C, 0x83, 0x5E, 0xF3, 0xCB, 0x73, 0x96, 
0x8E, 0xE2, 0x38, 0x24, 0x2A, 0x50, 0xF7, 0xE0, 0x61, 0xFB, 0x62, 0xD1, 0x15, 0xAF, 0x9A, 0xBB, 
0x70, 0x82, 0x52, 0x61, 0xA0, 0xB7, 0x70, 0xA8, 0x9A, 0x40, 0x2B, 0x15, 0xAF, 0xD5, 0xD7, 0xBC, 
0xB4, 0x32, 0x55, 0x63, 0xCD, 0x4D, 0x9B, 0x74, 0x9A, 0x7C, 0xD6, 0x1C, 0x6B, 0x6F, 0x67, 0x0D, 
0x84, 0x26, 0xE2, 0xA5, 0x32, 0xE4, 0x1E, 0x48, 0xD1, 0xE5, 0x69, 0x45, 0x37, 0x56, 0x0F, 0x0D, 
0x76, 0x9C, 0xA5, 0x73, 0x63, 0x09, 0xAC, 0xBB, 0xDC, 0x52, 0xBA, 0x72, 0xB1, 0xA5, 0x2E, 0xDD, 
0xA5, 0x56, 0xE1, 0x8A, 0xAE, 0xC8, 0x29, 0x75, 0xDE, 0xFE, 0xF8, 0x43, 0xCC, 0x2A, 0xC7, 0x92, 
0xB3, 0xA6, 0x6F, 0xAD, 0xD4, 0x13, 0xE1, 0xA2, 0x74, 0x16, 0x16, 0xB3, 0x1E, 0xAE, 0x06, 0x7B, 
0x3D, 0xD5, 0x44, 0x15, 0xAF, 0xE3, 0x35, 0x12, 0x78, 0x22, 0x87, 0xEA, 0xF9, 0x7B, 0x0F, 0x18, 
0x4E, 0x21, 0x36, 0xD9, 0xD0, 0x75, 0xD5, 0xBF, 0x70, 0x58, 0xEB, 0xBE, 0xCA, 0xAF, 0x2D, 0xEA, 
0xF9, 0xF7, 0x16, 0xD7, 0x49, 0xEE, 0x83, 0x37, 0xB5, 0x65, 0x98, 0xA2, 0xE8, 0x55, 0x5E, 0xAD, 
0xF6, 0x7A, 0x4F, 0xBC, 0xC6, 0xD7, 0xF3, 0xC3, 0xCC, 0x81, 0x1A, 0xD8, 0x25, 0x77, 0x82, 0x33, 
0x2B, 0x5F, 0x44, 0xE9, 0x03, 0xF5, 0x45, 0x6C, 0x2D, 0xA9, 0xCC, 0xE1, 0x86, 0x1A, 0xCD, 0xB7, 
0xDA, 0x69, 0xAE, 0x2A, 0x26, 0x7B, 0xEA, 0xFB, 0x9A, 0xE2, 0xB1, 0xA3, 0xC6, 0xF2, 0xD7, 0x4E, 
0xF5, 0x2A, 0x01, 0x04, 0x82, 0x16, 0x5F, 0xE8, 0xA5, 0x08, 0x37, 0x9A, 0xEC, 0xF1, 0xCB, 0x29, 
0x90, 0x80, 0x0D, 0xD5, 0xAE, 0x2C, 0x6E, 0x07, 0xA8, 0xB4, 0xBE, 0xBE, 0xA8, 0x2A, 0x83, 0xF5, 
0xE5, 0xA2, 0xED, 0x2A, 0x5F, 0x2A, 0xD5, 0xBE, 0x88, 0x51, 0xD1, 0x20, 0xF2, 0xDD, 0x99, 0xDC, 
0xDF, 0x7C, 0x9D, 0xF6, 0x24, 0x9A, 0xC2, 0x80, 0x81, 0x10, 0x17, 0x3E, 0xE4, 0x37, 0x58, 0xFF, 
0x04, 0x63, 0x8F, 0x76, 0xB0, 0xD1, 0x2A, 0x00, 0x00	
};

#define SPIFFS_MAXLENGTH_FILEPATH 32
const char *excludeListFile = "/.exclude.files";

typedef struct ExcludeListS {
    char *item;
    ExcludeListS *next;
} ExcludeList;

static ExcludeList *excludes = NULL;

static bool matchWild(const char *pattern, const char *testee) {
  const char *nxPat = NULL, *nxTst = NULL;

  while (*testee) {
    if (( *pattern == '?' ) || (*pattern == *testee)){
      pattern++;testee++;
      continue;
    }
    if (*pattern=='*'){
      nxPat=pattern++; nxTst=testee;
      continue;
    }
    if (nxPat){ 
      pattern = nxPat+1; testee=++nxTst;
      continue;
    }
    return false;
  }
  while (*pattern=='*'){pattern++;}  
  return (*pattern == 0);
}

static bool addExclude(const char *item){
    size_t len = strlen(item);
    if(!len){
        return false;
    }
    ExcludeList *e = (ExcludeList *)malloc(sizeof(ExcludeList));
    if(!e){
        return false;
    }
    e->item = (char *)malloc(len+1);
    if(!e->item){
        free(e);
        return false;
    }
    memcpy(e->item, item, len+1);
    e->next = excludes;
    excludes = e;
    return true;
}

static void loadExcludeList(fs::FS &_fs, const char *filename){
    static char linebuf[SPIFFS_MAXLENGTH_FILEPATH];
    fs::File excludeFile=_fs.open(filename, "r");
    if(!excludeFile){
        //addExclude("/*.js.gz");
        return;
    }
#ifdef ESP32
    if(excludeFile.isDirectory()){
      excludeFile.close();
      return;
    }
#endif
    if (excludeFile.size() > 0){
      uint8_t idx;
      bool isOverflowed = false;
      while (excludeFile.available()){
        linebuf[0] = '\0';
        idx = 0;
        int lastChar;
        do {
          lastChar = excludeFile.read();
          if(lastChar != '\r'){
            linebuf[idx++] = (char) lastChar;
          }
        } while ((lastChar >= 0) && (lastChar != '\n') && (idx < SPIFFS_MAXLENGTH_FILEPATH));

        if(isOverflowed){
          isOverflowed = (lastChar != '\n');
          continue;
        }
        isOverflowed = (idx >= SPIFFS_MAXLENGTH_FILEPATH);
        linebuf[idx-1] = '\0';
        if(!addExclude(linebuf)){
            excludeFile.close();
            return;
        }
      }
    }
    excludeFile.close();
}

static bool isExcluded(fs::FS &_fs, const char *filename) {
  if(excludes == NULL){
      loadExcludeList(_fs, excludeListFile);
  }
  ExcludeList *e = excludes;
  while(e){
    if (matchWild(e->item, filename)){
      return true;
    }
    e = e->next;
  }
  return false;
}

// WEB HANDLER IMPLEMENTATION

#ifdef ESP32
SPIFFSEditor::SPIFFSEditor(const fs::FS& fs, const String& username, const String& password)
#else
SPIFFSEditor::SPIFFSEditor(const String& username, const String& password, const fs::FS& fs)
#endif
:_fs(fs)
,_username(username)
,_password(password)
,_authenticated(false)
,_startTime(0)
{}

bool SPIFFSEditor::canHandle(AsyncWebServerRequest *request){
  if(request->url().equalsIgnoreCase("/edit")){
    if(request->method() == HTTP_GET){
      if(request->hasParam("list"))
        return true;
      if(request->hasParam("edit")){
        request->_tempFile = _fs.open(request->arg("edit"), "r");
        if(!request->_tempFile){
          return false;
        }
#ifdef ESP32
        if(request->_tempFile.isDirectory()){
          request->_tempFile.close();
          return false;
        }
#endif
      }
      if(request->hasParam("download")){
        request->_tempFile = _fs.open(request->arg("download"), "r");
        if(!request->_tempFile){
          return false;
        }
#ifdef ESP32
        if(request->_tempFile.isDirectory()){
          request->_tempFile.close();
          return false;
        }
#endif
      }
      request->addInterestingHeader("If-Modified-Since");
      return true;
    }
    else if(request->method() == HTTP_POST)
      return true;
    else if(request->method() == HTTP_DELETE)
      return true;
    else if(request->method() == HTTP_PUT)
      return true;

  }
  return false;
}


void SPIFFSEditor::handleRequest(AsyncWebServerRequest *request){
  if(_username.length() && _password.length() && !request->authenticate(_username.c_str(), _password.c_str()))
    return request->requestAuthentication();

  if(request->method() == HTTP_GET){
    if(request->hasParam("list")){
      String path = request->getParam("list")->value();
#ifdef ESP32
      File dir = _fs.open(path);
#else
      fs::Dir dir = _fs.openDir(path);
#endif
      path = String();
      String output = "[";
#ifdef ESP32
      File entry = dir.openNextFile();
      while(entry){
#else
      while(dir.next()){
        fs::File entry = dir.openFile("r");
#endif
        if (isExcluded(_fs, entry.name())) {
#ifdef ESP32
            entry = dir.openNextFile();
#endif
            continue;
        }
        if (output != "[") output += ',';
        output += "{\"type\":\"";
        output += "file";
        output += "\",\"name\":\"";
        output += String(entry.name());
        output += "\",\"size\":";
        output += String(entry.size());
        output += "}";
#ifdef ESP32
        entry = dir.openNextFile();
#else
        entry.close();
#endif
      }
#ifdef ESP32
      dir.close();
#endif
      output += "]";
      request->send(200, "application/json", output);
      output = String();
    }
    else if(request->hasParam("edit") || request->hasParam("download")){
      request->send(request->_tempFile, request->_tempFile.name(), String(), request->hasParam("download"));
    }
    else {
      const char * buildTime = __DATE__ " " __TIME__ " GMT";
      if (request->header("If-Modified-Since").equals(buildTime)) {
        request->send(304);
      } else {
        AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", edit_htm_gz, edit_htm_gz_len);
        response->addHeader("Content-Encoding", "gzip");
        response->addHeader("Last-Modified", buildTime);
        request->send(response);
      }
    }
  } else if(request->method() == HTTP_DELETE){
    if(request->hasParam("path", true)){
        _fs.remove(request->getParam("path", true)->value());
      request->send(200, "", "DELETE: "+request->getParam("path", true)->value());
    } else
      request->send(404);
  } else if(request->method() == HTTP_POST){
    if(request->hasParam("data", true, true) && _fs.exists(request->getParam("data", true, true)->value()))
      request->send(200, "", "UPLOADED: "+request->getParam("data", true, true)->value());
    else
      request->send(500);
  } else if(request->method() == HTTP_PUT){
    if(request->hasParam("path", true)){
      String filename = request->getParam("path", true)->value();
      if(_fs.exists(filename)){
        request->send(200);
      } else {
        fs::File f = _fs.open(filename, "w");
        if(f){
          f.write((uint8_t)0x00);
          f.close();
          request->send(200, "", "CREATE: "+filename);
        } else {
          request->send(500);
        }
      }
    } else
      request->send(400);
  }
}

void SPIFFSEditor::handleUpload(AsyncWebServerRequest *request, const String& filename, size_t index, uint8_t *data, size_t len, bool final){
  if(!index){
    if(!_username.length() || request->authenticate(_username.c_str(),_password.c_str())){
      _authenticated = true;
      request->_tempFile = _fs.open(filename, "w");
      _startTime = millis();
    }
  }
  if(_authenticated && request->_tempFile){
    if(len){
      request->_tempFile.write(data,len);
    }
    if(final){
      request->_tempFile.close();
    }
  }
}
